// Intrustions are of three type : 1. Type decleration Instructions     2. Arithmetic Instructions    3. Control Instructions 



// Example of Type decleration instruction


#include<stdio.h>

int main(){
    int a=7;
    int b=a;
    
    int c=b*1;
    int d=c+1;
    
    int sum=a+b+c+d;
    printf("sum is :%d",a+b+c+d);
    
    return 0;
    
}


// Arithmetic operator where we use +,-,*,/ .
// only single variable on the left hand side like (a=b+c) if we write like this (b+c=a) is invalid .


// expression for arithmetic ins.

#include<stdio.h>

int main(){
    int y,z;
    y=z=4;
    int x=y+z;
    
   printf("x is :%d",x );
    return 0;
    
}

// expression for power problem 

// in this we can't use " ^ " , we have to right (int power = pow(y,z) )

#include<stdio.h>
#include<math.h>

int main(){
    int y,z;
    y=z=4;
    int x=y+z;
    int power=pow(y,z);
    
   printf("x is :%d",power);
    return 0;
    
}


// expression for negative remainder value .

#include<stdio.h>
#include<math.h>

int main(){
    printf("%d \n",-8%3);
    
    return 0;
    
}


// type conversion 


#include<stdio.h>
#include<math.h>

int main(){
    printf("%d \n",2*3);
    
    return 0;
    
}
 // in this expression we use float value like 4.0


#include<stdio.h>
#include<math.h>

int main(){
    printf("%f \n",4.0*3);
    
    return 0;
    
}

// operator precedence in this we use BODMAS rule .


#include<stdio.h>
#include<math.h>

int main(){
    int a=5+7*12;
    printf("%d \n",a);
    
    return 0;
    
}
